{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OpenCred Config Schema - Combined Format",
  "description": "A schema for configuration of OpenCred via YAML. This can be used by VS Code to more easily autocomplete and check configurations.",
  "type": "object",
  "additionalProperties": true,
  "properties": {
    "app": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "express": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "httpOnly": {
              "type": "boolean",
              "description": "Whether to use HTTP only (avoid also opening an HTTPS port). Used when behind a reverse proxy. Set to false for local development on HTTPS, which is needed for some features.",
              "default": true
            }
          }
        },
        "mongodb": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "url": {
              "type": "string",
              "description": "The connection string for the MongoDB database including database name."
            },
            "connectOptions": {
              "type": "object",
              "description": "Additional options to pass to the MongoDB driver.",
              "additionalProperties": true,
              "properties": {
                "authSource": {
                  "type": "string",
                  "description": "Mongo authSource"
                },
                "tls": {
                  "type": "boolean",
                  "description": "Whether a TLS connection is required"
                }
              }
            }
          }
        },
        "opencred": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "relyingParties": {
              "type": "array",
              "items": { "$ref": "#/definitions/RelyingParty" }
            },
            "signingKeys": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["ES256", "RS256"]
                  },
                  "purpose": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["id_token", "authorization_request"]
                    }
                  },
                  "privateKeyPem": {
                    "type": "string",
                    "description": "The private key in PEM format."
                  },
                  "publicKeyPem": {
                    "type": "string",
                    "description": "The public key in PEM format."
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the key."
                  }
                }
              }
            },
            "caStore": {
              "$ref": "#/definitions/CaStores"
            },
            "trustedCredentialIssuers": {
              "$ref": "#/definitions/TrustedCredentialIssuers"
            },
            "didWeb": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "mainEnabled": {
                  "type": "boolean",
                  "description": "Whether to enable DID Web document endpoint."
                },
                "mainDocument": {
                  "type": "string",
                  "description": "If specified, a JSON string of the base of a DID Document to serve at /.well-known/did.json with any signingKeys of purpose authorization_request added in automatically -- Otherwise a dynamically generated document will be served if mainEnabled is true."
                },
                "linkageEnabled": {
                  "type": "boolean",
                  "description": "Whether to enable the DID Configuration endpoint to serve DomainLinkageCredentials."
                },
                "linkageDocument": {
                  "type": "string",
                  "description": "If specified, a JSON string of a static set of DomainLinkageCredentials to serve at /.well-known/did-configuration.json -- An empty array of linked_dids will be served if a linkageDocument is not specified but linkageEnabled is true."
                }
              }
            },
            "audit": {
              "type": "object",
              "description": "Configuration for the Audit Presentation feature.",
              "additionalProperties": false,
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "Whether to enable the Audit Presentation feature, which allows re-checking of a previously delivered and stored presentation. If enabled, access at /audit-vp"
                },
                "fields": {
                  "type": "array",
                  "description": "The fields to include in the audit presentation.",
                  "items": {
                    "$ref": "#/definitions/AuditField"
                  }
                }
              }
            },
            "reCaptcha": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "enable": {
                  "type": "boolean",
                  "description": "Whether to enable reCaptcha for the login page."
                },
                "version": {
                  "type": "number",
                  "description": "Which version of reCaptcha to use. Currently only 2 and 3 are supported. Default: 2",
                  "enum": [2, 3],
                  "default": 2
                },
                "siteKey": {
                  "type": "string",
                  "description": "The site key for reCaptcha."
                },
                "secretKey": {
                  "type": "string",
                  "description": "The secret key for reCaptcha, for server-side verification."
                },
                "pages": {
                  "type": "array",
                  "description": "Which pages on which reCaptcha is used. Currently only 'audit' is supported.",
                  "items": {
                    "type": "string",
                    "enum": ["audit"]
                  }
                }
              }
            },
            "options": {
              "type": "object",
              "description": "Additional options that control operation across all relying parties.",
              "additionalProperties": false,
              "properties": {
                "exchangeProtocols": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["chapi", "openid4vp"]
                  }
                }
              }
            },
            "translations": {
              "$ref": "#/definitions/Translations"
            },
            "defaultLanguage": {
              "type": "string",
              "description": "The default language for the UI.",
              "pattern": "^[a-z]{2}(-[A-Z]{2})?$",
              "examples": ["en", "en-US"]
            },
            "customTranslateScript": {
              "type": "string",
              "description": "A path to a custom script that will be run to translate the UI, probably a variant of a Google Translate script."
            },
            "defaultBrand": {
              "$ref": "#/definitions/BrandConfiguration"
            }
          }
        },
        "server": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "baseUri": {
              "type": "string",
              "description": "The base URI of the OpenCred server."
            }
          }
        }
      }
    },
    "core": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "core": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "workers": {
              "type": "integer"
            }
          }
        },
        "ensureConfigOverride": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "description": "Whether to require a config override occurs."
            }
          }
        },
        "loggers": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "console": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "bedrock": {
                  "type": "object",
                  "properties": {
                    "formatter": {
                      "type": "string",
                      "enum": ["logstash"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "RelyingPartyBase": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the relying party."
        },
        "description": {
          "type": "string",
          "description": "A description of the relying party, not prominently displayed in the app"
        },
        "clientId": {
          "type": "string",
          "description": "The client ID (primary identifier) for the relying party."
        },
        "clientSecret": {
          "type": "string",
          "description": "The client secret for the relying party, used as an API key."
        },
        "caStore": {
          "type": "boolean",
          "description": "If false, bypasses CA checks for this RP."
        },
        "icon": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the icon for the relying party."
        },
        "backgroundImage": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the header background image for the relying party."
        },
        "brand": {
          "$ref": "#/definitions/BrandConfiguration"
        },
        "redirectUri": {
          "type": "string",
          "description": "The redirect URI for the relying party, if OIDC integration is being used."
        },
        "explainerVideo": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "provider": {
              "type": "string",
              "description": "The hosting provider of the video. Currently only 'youtube' is supported.",
              "enum": ["youtube"]
            },
            "id": {
              "type": "string",
              "description": "The ID of the video on the hosting provider, a unique identifier.",
              "examples": ["dQw4w9WgXcQ"]
            }
          }
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the scope.",
                "enum": ["openid"]
              },
              "description": {
                "type": "string",
                "description": "A description of the scope."
              }
            }
          }
        },
        "idTokenExpirySeconds": {
          "type": "integer",
          "description": "The number of seconds for which an id_token is valid. Default: 3600 (1 hour)"
        },
        "claims": {
          "type": "array",
          "description": "If OIDC integration is used, this is a set of claims that will be added to the id_token subject and information on where in a credential the values will be sourced.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the claim as it will appear within 'sub' of an id_token."
              },
              "sourcePath": {
                "type": "string",
                "description": "The path to the claim in the credential from an assumed root of credentialSubject.",
                "examples": [
                  "driversLicense.document_number",
                  "birthDate",
                  "achievement.id"
                ]
              }
            }
          }
        },
        "trustedCredentialIssuers": {
          "$ref": "#/definitions/TrustedCredentialIssuers"
        },
        "workflow": {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/definitions/EntraWorkflow"
            },
            {
              "$ref": "#/definitions/NativeWorkflow"
            },
            {
              "$ref": "#/definitions/VcApiWorkflow"
            }
          ],
          "allOf": [
            {
              "$ref": "#/definitions/BaseWorkflow"
            }
          ]
        },
        "translations": {
          "$ref": "#/definitions/Translations"
        }
      }
    },
    "RelyingPartyFrom": {
      "type": "object",
      "properties": {
        "configFrom": {
          "type": "string",
          "description": "The clientId of the relying party from which to copy configuration."
        },
        "clientId": {
          "type": "string",
          "description": "The client ID (primary identifier) for the relying party."
        },
        "workflow": {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/definitions/EntraWorkflow"
            },
            {
              "$ref": "#/definitions/NativeWorkflow"
            },
            {
              "$ref": "#/definitions/VcApiWorkflow"
            }
          ]
        }
      },
      "required": ["configFrom", "clientId", "workflow"]
    },
    "RelyingParty": {
      "allOf": [
        {
          "$ref": "#/definitions/RelyingPartyBase"
        }
      ],
      "oneOf": [
        {
          "$ref": "#/definitions/RelyingPartyFrom"
        },
        {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RelyingPartyBase"
            }
          ],
          "not": {
            "$ref": "#/definitions/RelyingPartyFrom"
          },
          "required": ["clientId", "clientSecret", "workflow"]
        }
      ]
    },
    "BrandConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "cta": {
          "type": "string",
          "description": "The call to action color for primary links and interactive content.",
          "pattern": "^#[0-9a-fA-F]{6}$"
        },
        "primary": {
          "type": "string",
          "description": "The primary color for the brand.",
          "pattern": "^#[0-9a-fA-F]{6}$"
        },
        "header": {
          "type": "string",
          "description": "The color for the header.",
          "pattern": "^#[0-9a-fA-F]{6}$"
        }
      },
      "required": ["cta", "primary", "header"]
    },
    "BaseWorkflow": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the workflow. Must be unique across all RPs."
        },
        "untrustedVariableAllowList": {
          "type": "array",
          "items": { "type": "string" },
          "description": "A list of query params whose values passed in on initialization will be saved to the DB with the exchange for later reporting.",
          "default": []
        }
      },
      "required": ["id"]
    },
    "EntraWorkflow": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "type": {
          "type": "string",
          "enum": ["microsoft-entra-verified-id"]
        },
        "apiBaseUrl": {
          "type": "string",
          "description": "The base URL of the Entra API"
        },
        "apiLoginBaseUrl": {
          "type": "string",
          "description": "The base URL of the domain used for login"
        },
        "apiTenantId": {
          "type": "string",
          "description": "The Tenant ID for the Entra API"
        },
        "apiClientId": {
          "type": "string",
          "description": "The client ID for an application authorized to use the Entra API within the tenant"
        },
        "apiClientSecret": {
          "type": "string",
          "description": "The client secret for the Entra API"
        },
        "verifierDid": {
          "type": "string",
          "description": "The DID of the verifier, already registered with the Entra API"
        },
        "verifierName": {
          "type": "string",
          "description": "The name of the verifier, already registered with the Entra API"
        },
        "steps": {
          "type": "object",
          "patternProperties": {
            "^.+$": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "acceptedCredentialType": {
                  "type": "string",
                  "description": "The type of credential accepted by this step, required in the initial step."
                },
                "callback": { "$ref": "#/definitions/Callback" }
              }
            }
          }
        },
        "initialStep": {
          "type": "string",
          "description": "The ID of the initial step in the workflow"
        },
        "allowRevokedCredentials": {
          "type": "boolean",
          "description": "Whether to allow credentials that have been revoked by their issuer.",
          "default": false
        },
        "validateLinkedDomain": {
          "type": "boolean",
          "description": "Whether to validate a linked domain that may be related to the credential issuer.",
          "default": false
        },
        "untrustedVariableAllowList": {
          "type": "array",
          "items": { "type": "string" },
          "description": "A list of query params whose values passed in on initialization will be saved to the DB with the exchange for later reporting.",
          "default": []
        }
      },
      "required": [
        "id",
        "type",
        "apiBaseUrl",
        "apiLoginBaseUrl",
        "apiTenantId",
        "apiClientId",
        "apiClientSecret",
        "verifierDid",
        "verifierName",
        "steps",
        "initialStep"
      ]
    },
    "NativeWorkflow": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "type": {
          "type": "string",
          "enum": ["native"]
        },
        "id": {
          "type": "string",
          "description": "The ID of the workflow. Must be unique across all RPs."
        },
        "initialStep": {
          "type": "string",
          "description": "The ID of the initial step in the workflow."
        },
        "steps": {
          "type": "object",
          "patternProperties": {
            "^.+$": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "createChallenge": { "type": "boolean" },
                "verifiablePresentationRequest": {
                  "type": "string",
                  "description": "JSON string of a VPR, such as an object with a 'query' object of type 'QueryByExample'."
                },
                "constraintsOverride": {
                  "type": "string",
                  "description": "Optional JSON string expressing constraints that combine with or may partially override the VPR."
                },
                "callback": { "$ref": "#/definitions/Callback" }
              }
            }
          }
        }
      },
      "required": ["id", "type"]
    },
    "VcApiWorkflow": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": ["vc-api"]
        },
        "id": {
          "type": "string",
          "description": "The ID of the workflow. Must be unique across all RPs."
        },
        "baseUrl": {
          "type": "string",
          "description": "The base URL of the VC API used for the exchange."
        },
        "vpr": {
          "type": "string",
          "description": "JSON string of a VPR, such as an object with a 'query' object of type 'QueryByExample'."
        },
        "capability": {
          "type": "string",
          "description": "The capability to use for exchange API auth."
        },
        "clientSecret": {
          "type": "string",
          "description": "The client secret key seed for the VC API."
        }
      },
      "required": ["id", "type", "capability", "clientSecret", "baseUrl", "vpr"]
    },
    "Translations": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z]{2}(-[A-Z]{2})?$": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "loginCta": {
              "type": "string",
              "description": "The text for the call to action on the login page."
            },
            "loginExplain": {
              "type": "string",
              "description": "The text explaining the login process."
            },
            "appInstallExplain": {
              "type": "string",
              "description": "The text explaining the app installation process."
            },
            "appCta": {
              "type": "string",
              "description": "The text for the call to action on the app installation page."
            },
            "appCta-chapi-label": {
              "type": "string",
              "description": "The text for the call to action on the app installation page for CHAPI."
            },
            "appCta-openid4vp-label": {
              "type": "string",
              "description": "The text for the call to action on the app installation page for OpenID4VP."
            },
            "chapiPageAnotherWay": {
              "type": "string",
              "description": "The text for the link to the CHAPI page on the app installation page."
            },
            "qrExplain": {
              "type": "string",
              "description": "The text explaining the QR code scanning process."
            },
            "openid4vpAnotherWay": {
              "type": "string",
              "description": "The text for the link to the QR code page on the app installation page."
            },
            "openid4vpAnotherWayLabel": {
              "type": "string",
              "description": "A snippet of text prior to the openid4vpAnotherWay link."
            },
            "openid4vpQrAnotherWay": {
              "type": "string",
              "description": "The text for the link to the QR code page on the app installation page."
            },
            "openid4vpQrAnotherWayLabel": {
              "type": "string",
              "description": "A snippet of text prior to the openid4vpQrAnotherWay link."
            },
            "qrPageExplain": {
              "type": "string",
              "description": "The text explaining the QR code page."
            },
            "qrExplainerText": {
              "type": "string",
              "description": "Text used as an action link to bring up a video that shows how to use the QR code. Video configured at opencred.relyingParties[].exlplainerVideo"
            },
            "qrPageExplainHelp": {
              "type": "string",
              "description": "Text or HTML above a QR code to provide additional help to the user on what to do with it."
            },
            "pageTitle": {
              "type": "string",
              "description": "The value of the page <title> element."
            },
            "qrPageCta": {
              "type": "string",
              "description": "The text for the call to action on the QR code page."
            },
            "qrDisclaimer": {
              "type": "string",
              "description": "The disclaimer text for the QR code page."
            },
            "copyright": {
              "type": "string",
              "description": "The text for the copyright notice in the footer."
            },
            "translate": {
              "type": "string",
              "description": "The text for the language selector."
            },
            "qrTitle": {
              "type": "string",
              "description": "The title for the QR code page."
            },
            "qrFooter": {
              "type": "string",
              "description": "The footer text for the QR code page."
            },
            "qrFooterHelp": {
              "type": "string",
              "description": "An additional location for help text or HTML below the QR code."
            },
            "qrClickMessage": {
              "type": "string",
              "description": "The message to display when the QR code is clicked."
            },
            "home": {
              "type": "string",
              "description": "The text for the home link in the header."
            },
            "verificationSuccess": {
              "type": "string",
              "description": "The text for the verification success message."
            },
            "exchangeActiveGoBack": {
              "type": "string",
              "description": "The label of the button that cancels an active exchange."
            },
            "exchangeActiveExpiryMessage": {
              "type": "string",
              "description": "The message before the exchange active expiry timer."
            },
            "exchangeActiveExpirySeconds": {
              "type": "number",
              "description": "The number of seconds that a user has to complete an exchange."
            },
            "exchangeErrorTitle": {
              "type": "string",
              "description": "The title of the error page."
            },
            "exchangeErrorSubtitle": {
              "type": "string",
              "description": "The subtitle of the error page."
            },
            "exchangeResetTitle": {
              "type": "string",
              "description": "The title message preceeding the exchange retry button."
            },
            "exchangeReset": {
              "type": "string",
              "description": "The label of the exchange retry button."
            }
          }
        }
      }
    },
    "AuditFieldBase": {
      "type": "object",
      "description": "Configuration of a specific field available for presentation auditing",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unclear what this field does. TODO: clarify."
        },
        "name": {
          "type": "string",
          "description": "The display name of the field when an audit is presented",
          "examples": ["Issue Date"]
        },
        "path": {
          "type": "string",
          "description": "The path from credential root as $ for a credential contained within an audited presentation",
          "examples": ["$.credentialSubject.driversLicense.issue_date"]
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required for audits to pass on this server"
        }
      },
      "required": ["id", "name", "path", "required"]
    },
    "AuditFieldText": {
      "type": "object",
      "description": "An Audit Field for a text field",
      "allOf": [
        {
          "$ref": "#/definitions/AuditFieldBase"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["text"]
            },
            "default": {
              "type": "string",
              "description": "The default value for the field"
            }
          },
          "required": ["type"]
        }
      ]
    },
    "AuditFieldDate": {
      "type": "object",
      "description": "An Audit Field for a date picker field",
      "allOf": [
        {
          "$ref": "#/definitions/AuditFieldBase"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["date"]
            },
            "default": {
              "type": "string",
              "description": "The default value for the field yyyy-MM-dd",
              "format": "date",
              "examples": ["2021-01-01"]
            }
          },
          "required": ["type"]
        }
      ]
    },
    "AuditFieldDropdown": {
      "type": "object",
      "description": "An Audit Field with options for a dropdown",
      "allOf": [
        {
          "$ref": "#/definitions/AuditFieldBase"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["dropdown"]
            },
            "options": {
              "type": "object",
              "patternProperties": {
                "^.+$": {
                  "oneOf": [
                    { "type": "string" },
                    { "type": "null" },
                    { "type": "number" }
                  ]
                }
              }
            },
            "default": {
              "type": "string",
              "description": "The LABEL of the default value for the field",
              "examples": ["Option 1"]
            }
          },
          "required": ["type", "options"]
        }
      ]
    },
    "AuditFieldNumber": {
      "type": "object",
      "description": "An Audit Field for a date picker field",
      "allOf": [
        {
          "$ref": "#/definitions/AuditFieldBase"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": ["number"]
            },
            "default": {
              "type": "number",
              "description": "The default value for the field yyyy-MM-dd",
              "examples": [1, 2]
            }
          },
          "required": ["type"]
        }
      ]
    },
    "AuditField": {
      "oneOf": [
        {
          "$ref": "#/definitions/AuditFieldText"
        },
        {
          "$ref": "#/definitions/AuditFieldDate"
        },
        {
          "$ref": "#/definitions/AuditFieldDropdown"
        },
        {
          "$ref": "#/definitions/AuditFieldNumber"
        }
      ]
    },
    "Callback": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to which to send the callback request.",
          "format": "uri"
        },
        "headersVariable": {
          "type": "string",
          "description": "The name of the variable in the exchange that contains the headers to send with the callback request."
        },
        "oauth": {
          "type": "object",
          "description": "If an auth token needs to be obtained to request the callback URL, it can be obtained using an OAuth2 Client Credentials access token grant with these settings. Terms match configuration values for a Microsoft system.",
          "additionalProperties": false,
          "properties": {
            "issuer": {
              "type": "string",
              "description": "The issuer of the OAuth token.",
              "examples": [
                "https://login.microsoftonline.com/1b0201d7-f9c6-4271-a6fa-fe6a0064de8a/oauth2/v2.0"
              ]
            },
            "tokenUrl": {
              "type": "string",
              "description": "The URL to which to send the token request.",
              "format": "uri",
              "examples": [
                "https://login.microsoftonline.com/1b0201d7-f9c6-4271-a6fa-fe6a0064de8a/oauth2/v2.0/token"
              ]
            },
            "clientId": {
              "type": "string",
              "description": "The client ID for the OAuth token request."
            },
            "clientSecret": {
              "type": "string",
              "description": "The client secret for the OAuth token request."
            },
            "scope": {
              "type": "array",
              "description": "The set of scopes for the OAuth token request.",
              "items": {
                "type": "string",
                "examples": [".default", "openid"]
              }
            }
          }
        }
      }
    },
    "TrustedCredentialIssuers": {
      "type": "array",
      "items": { "type": "string" },
      "description": "The set of trusted issuers whose credentials are admissible by this RP.",
      "default": []
    },
    "CaStores": {
      "type": "array",
      "description": "A set of certificates to trust in extended did:jwk x509 validation.",
      "items": {
        "type": "object",
        "properties": {
          "pem": {
            "type": "string",
            "description": "The PEM-encoded certificate."
          }
        }
      }
    }
  }
}
